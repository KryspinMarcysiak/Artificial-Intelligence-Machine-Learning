# -*- coding: utf-8 -*-
"""Final Task

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KU6r8-SqrJYA6Sa_7Uz2svPuf6j2v5-x

Kryspin Marcysiak
21140376

I am the author of this python script.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

ds = pd.read_csv('/content/drive/MyDrive/Finalproject/dataset/online_shoppers_intention.csv')

ds.info()

ds.describe()

ds.describe(include ='object')

ds.describe(include = 'bool')

ds['Month'].unique()

plt.figure(figsize=(8,4))
sns.countplot(x='Month', data=ds, order=['Feb', 'Mar', 'May', 'June', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])

plt.title('Total Sessions Per Month', fontsize=14)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Count', fontsize=12)

plt.tight_layout()
plt.show()

result = ds.groupby(['Month','Revenue'])['Revenue'].agg(['count']).reset_index()
result.head()

plt.figure(figsize=(8, 4))
sns.lineplot(data=result, x='Month', y='count', hue='Revenue', palette=['red', 'green'])

plt.title('Revenue Count per Month', fontsize=14)
plt.xlabel('Month', fontsize=12)
plt.ylabel('Revenue Count', fontsize=12)

plt.tight_layout()
plt.show()

weekend = ds.groupby(['Weekend','Revenue'])['Revenue'].agg(['count']).reset_index()
weekend.head()

plt.figure(figsize=(8,4))
sns.barplot(data=weekend, x='Weekend', y='count', hue='Revenue', palette=['red', 'green'])

plt.title('More Revenue on/off weekend', fontsize=14)
plt.xlabel('Weekend', fontsize=12)
plt.ylabel('Revenue Count', fontsize=12)

plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 4))

sns.regplot(data=ds, x='BounceRates', y='ExitRates')
plt.title("Differentiation between BounceRates & ExitRates", fontsize=14)

plt.xlabel("BounceRates", fontsize=12)
plt.ylabel("ExitRates", fontsize=12)

plt.tight_layout()
plt.show()

ds['Region'].unique()

regionR = ds.groupby(['Region','Revenue'])['Revenue'].agg(['count']).reset_index()
regionR.head()

plt.figure(figsize=(8, 4))
sns.lineplot(data=regionR, x='Region', y='count', hue='Revenue', palette=['red', 'green'])

plt.title('Region & Revenue', fontsize=14)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Revenue by Region', fontsize=12)

plt.tight_layout()
plt.show()

visitor = ds.groupby(['VisitorType','Revenue'])['Revenue'].agg(['count']).reset_index()
visitor

plt.figure(figsize=(8, 4))
sns.barplot(data=visitor, x='VisitorType', y='count',hue='Revenue', palette=['red', 'green'])

plt.title("Visitor & Revenue", fontsize=14)
plt.xlabel("Visitor Type", fontsize=12)
plt.ylabel("Revenue", fontsize=12)

plt.tight_layout()
plt.show()

ds['Browser'].unique()

browserR = ds.groupby(['Browser','Revenue'])['Revenue'].agg(['count']).reset_index()
browserR

plt.figure(figsize=(8, 4))
sns.lineplot(data=browserR, x='Browser', y='count', hue='Revenue', palette=['red', 'green'])

plt.title('Browser & Revenue', fontsize=14)
plt.xlabel('Browser', fontsize=12)
plt.ylabel('Revenue', fontsize=12)

plt.tight_layout()
plt.show()

ds['TrafficType'].unique()

traffic = ds.groupby(['TrafficType','Revenue'])['Revenue'].agg(['count']).reset_index()
traffic

plt.figure(figsize=(8, 4))
sns.barplot(data=traffic, x='TrafficType', y='count', hue='Revenue')

plt.title("Traffic Type Affect on Revenue", fontsize=14)
plt.xlabel("Traffic Type", fontsize=12)
plt.ylabel("Revenue", fontsize=12)

plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 4))
sns.boxplot(data=ds, x='Revenue', y='PageValues')

plt.title("Do higher page values affect the revenue?", fontsize=14)
plt.xlabel("Revenue", fontsize=12)
plt.ylabel("Page Value", fontsize=12)

plt.tight_layout()
plt.show()

ds['OperatingSystems'].unique()

system = ds.groupby(['OperatingSystems','Revenue'])['Revenue'].agg(['count']).reset_index()
system

plt.figure(figsize=(8, 4))
sns.barplot(data=system, x='OperatingSystems', y='count', hue='Revenue')

plt.title("Operating Systems & Revenue", fontsize=14)
plt.xlabel("Operating Systems", fontsize=12)
plt.ylabel("Revenue Count", fontsize=12)

plt.tight_layout()
plt.show()

ds['SpecialDay'].unique()

special = ds.groupby(['SpecialDay','Revenue'])['Revenue'].agg(['count']).reset_index()
special

plt.figure(figsize=(8, 4))
sns.barplot(data=special, x='SpecialDay', y='count', hue='Revenue')

plt.title('Special Day & Revenue', fontsize=14)
plt.xlabel('Closeness to a Special Day', fontsize=12)
plt.ylabel('Revenue', fontsize=12)

plt.tight_layout()
plt.show()

ds['ProductRelated_Duration'].unique()

ProductRelated_Duration = ds.groupby('ProductRelated')['ProductRelated_Duration'].agg(['count','mean']).reset_index()
ProductRelated_Duration

plt.figure(figsize=(8, 4))
sns.lineplot(data=ds, x='ProductRelated', y='ProductRelated_Duration', hue='Revenue', palette=['red', 'green'])

plt.title('Product Value & Duration impact on Revenue', fontsize=14)
plt.xlabel('Page Related Value', fontsize=12)
plt.ylabel('Duration', fontsize=12)

plt.tight_layout()
plt.show()

Informational_Duration = ds.groupby('Informational')['Informational_Duration'].agg(['count','mean']).reset_index()
Informational_Duration

plt.figure(figsize=(12, 6))
sns.pointplot(data=ds, x='Informational', y='Informational_Duration', hue='Revenue', palette=['red', 'green'])

plt.title('Informational & Duration impact on Revenue', fontsize=14)
plt.xlabel('Informational Value', fontsize=12)
plt.ylabel('Duration', fontsize=12)

plt.tight_layout()
plt.show()

AdministrativeRelated = ds.groupby('Administrative')['Administrative_Duration'].agg(['count','mean']).reset_index()
AdministrativeRelated

plt.figure(figsize=(12, 6))
sns.pointplot(data=ds, x='Administrative', y='Administrative_Duration', hue='Revenue', palette=['red', 'green'])

plt.title('Administrative & Duration impact on Revenue', fontsize=14)
plt.xlabel('Administrative Value', fontsize=12)
plt.ylabel('Duration', fontsize=12)

plt.tight_layout()
plt.show()

ds.corr()

correlation_heatmap = ds.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correlation_heatmap, annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)
plt.title('Correlation Heatmap')

plt.show()

plt.figure(figsize=(10, 8))
sns.catplot(data=ds, x='VisitorType', y='ExitRates', hue='Revenue', kind='box')
plt.title('Visitor Type & Revenue vs Exit Rates')

ds['VisitorType'].value_counts()

plt.figure(figsize=(10, 10))

f = sns.FacetGrid(data=ds, col='VisitorType', hue='Revenue')
f.map(sns.lineplot, "ProductRelated", "ProductRelated_Duration", alpha = .8)

"""**Experimental** **Design**"""

ds.isna().sum()

ds.info()

ds.drop(columns=['Weekend', 'TrafficType', 'Region', 'Browser', 'OperatingSystems'], inplace=True)

ds.drop(columns=['SpecialDay', 'Month', 'VisitorType'], inplace=True)

ds.info()

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

ds["Revenue"] = ds["Revenue"].astype(int)

ds.info()

X = ds.drop("Revenue", axis=1)
y = ds["Revenue"]
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, train_size = .70)

X_test, X_val, y_test, y_val = train_test_split(X_test, y_test, random_state=42, test_size = .50)

X_train.shape[0]/X.shape[0]

"""**Random Forest**"""

from sklearn.ensemble import RandomForestClassifier
classifier_rf = RandomForestClassifier(random_state=42)

classifier_rf.fit(X_train, y_train)

y_pred = classifier_rf.predict(X_test)
y_pred

accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f'Accuracy: {accuracy}')
print(f'Classification Report:\n{classification_rep}')

val_y_pred = classifier_rf.predict(X_val)
val_y_pred

val_accuracy = accuracy_score(y_val, val_y_pred)
val_classification_rep = classification_report(y_val, val_y_pred)

print(f'Accuracy: {val_accuracy}')
print(f'Classification Report:\n{val_classification_rep}')

classifier_rf = RandomForestClassifier(n_estimators=200, random_state=42)

classifier_rf.fit(X_train, y_train)

val_y_pred = classifier_rf.predict(X_val)
val_y_pred

val_accuracy = accuracy_score(y_val, val_y_pred)
val_classification_rep = classification_report(y_val, val_y_pred)

print(f'Accuracy: {val_accuracy}')
print(f'Classification Report:\n{val_classification_rep}')

classifier_rf = RandomForestClassifier(max_depth =20, random_state=42)

classifier_rf.fit(X_train, y_train)

val_y_pred = classifier_rf.predict(X_val)
val_y_pred

val_accuracy = accuracy_score(y_val, val_y_pred)
val_classification_rep = classification_report(y_val, val_y_pred)

print(f'Accuracy: {val_accuracy}')
print(f'Classification Report:\n{val_classification_rep}')

classifier_rf = RandomForestClassifier(max_depth =20, min_samples_split=5, random_state=42)

classifier_rf.fit(X_train, y_train)

val_y_pred = classifier_rf.predict(X_val)
val_y_pred

val_accuracy = accuracy_score(y_val, val_y_pred)
val_classification_rep = classification_report(y_val, val_y_pred)

print(f'Accuracy: {val_accuracy}')
print(f'Classification Report:\n{val_classification_rep}')